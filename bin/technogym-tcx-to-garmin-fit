#!/usr/bin/env python3

# Convert TCX from Technogym SkillBike, as uploaded by their MyWellness cloud to Strava,
# to FIT for upload to Garmin Connect. Manufacturer is faked as ZWIFT to enable Physio TrueUp
# syncing back to device and updating of training metrics.

from contextlib import AbstractContextManager
from dataclasses import dataclass
from enum import Enum
from functools import cached_property
from io import BytesIO
import os
from typing import NewType
from typing import Optional

import click
from dateutil.parser import isoparse
import jpype
import jpype.imports
from jpype.types import JFloat
from jpype.types import JInt
from jpype.types import JLong
from jpype.types import JShort
from lxml import etree
import numpy as np
import numpy.typing as npt
from pint import UnitRegistry

ureg = UnitRegistry()
Q = ureg.Quantity
jpype.startJVM(classpath=[
    os.path.expanduser('~/bin/.ext/.ext-fitsdk/fit.jar'),
    '/usr/share/java/org.jpype.jar',  # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1017761
])

from com.garmin import fit  # noqa: E402
import java.io.File  # noqa: E402

TS = NewType('TS', float)


class Sport(Enum):
    IndoorCycling = (fit.Sport.CYCLING, fit.SubSport.INDOOR_CYCLING,)
    IndoorRowing = (fit.Sport.ROWING, fit.SubSport.INDOOR_ROWING,)
    Treadmill = (fit.Sport.RUNNING, fit.SubSport.TREADMILL,)


@dataclass(frozen=True)
class Lap():
    timestamp: npt.NDArray[TS]
    _distance: Optional[Q]
    _altitude: Optional[Q]
    _cadence: Optional[Q]
    _speed: Optional[Q]
    _power: Optional[Q]
    _heart_rate: Optional[Q]
    total_calories: Optional[float]

    @cached_property
    def distance(self) -> Optional[npt.NDArray[float]]:
        if self._distance is None:
            return None
        else:
            return self._distance.to(ureg.m).magnitude

    @cached_property
    def altitude(self) -> Optional[npt.NDArray[float]]:
        if self._altitude is None:
            return None
        else:
            return self._altitude.to(ureg.m).magnitude

    @cached_property
    def cadence(self) -> Optional[npt.NDArray[float]]:
        if self._cadence is None:
            return None
        else:
            return self._cadence.to(ureg.rpm).magnitude

    @cached_property
    def speed(self) -> Optional[npt.NDArray[float]]:
        if self._speed is None:
            return None
        else:
            return self._speed.to(ureg.mps).magnitude

    @cached_property
    def power(self) -> Optional[npt.NDArray[float]]:
        if self._power is None:
            return None
        else:
            return self._power.to(ureg.watt).magnitude

    @cached_property
    def heart_rate(self) -> Optional[npt.NDArray[float]]:
        if self._heart_rate is None:
            return None
        else:
            return self._heart_rate.to(1 / ureg.minute).magnitude

    @cached_property
    def start_time(self) -> TS:
        return TS(self.timestamp.min())

    @cached_property
    def stop_time(self) -> TS:
        return TS(self.timestamp.max())

    @cached_property
    def total_elapsed_time(self) -> float:
        return self.stop_time - self.start_time + 1

    @cached_property
    def total_timer_time(self) -> float:
        # TODO: detect pauses somehow?
        return self.total_elapsed_time

    @cached_property
    def total_distance(self) -> Optional[float]:
        if self._distance is None:
            return None
        else:
            return self.distance.max()

    @cached_property
    def avg_cadence(self) -> Optional[float]:
        if self._cadence is None:
            return None
        else:
            return self.cadence.mean()

    @cached_property
    def max_cadence(self) -> Optional[float]:
        if self._cadence is None:
            return None
        else:
            return self.cadence.max()

    @cached_property
    def avg_speed(self) -> Optional[float]:
        if self._speed is None:
            return None
        else:
            return self.speed.mean()

    @cached_property
    def max_speed(self) -> Optional[float]:
        if self._speed is None:
            return None
        else:
            return self.speed.max()

    @cached_property
    def avg_power(self) -> Optional[float]:
        if self._power is None:
            return None
        else:
            return self.power.mean()

    @cached_property
    def max_power(self) -> Optional[float]:
        if self._power is None:
            return None
        else:
            return self.power.max()

    @cached_property
    def avg_heart_rate(self) -> Optional[float]:
        if self._heart_rate is None:
            return None
        else:
            return self.heart_rate.mean()

    @cached_property
    def max_heart_rate(self) -> Optional[float]:
        if self._heart_rate is None:
            return None
        else:
            return self.heart_rate.max()


@dataclass(frozen=True)
class Session():
    laps: list[Lap]

    @cached_property
    def start_time(self) -> TS:
        return max(lap.start_time for lap in self.laps)

    @cached_property
    def stop_time(self) -> TS:
        return max(lap.stop_time for lap in self.laps)

    @cached_property
    def total_elapsed_time(self) -> float:
        return self.stop_time - self.start_time + 1

    @cached_property
    def total_timer_time(self) -> float:
        return sum(lap.total_timer_time for lap in self.laps)

    @cached_property
    def total_distance(self) -> Optional[float]:
        laps_distance = list(filter(None, (lap.total_distance for lap in self.laps)))
        if laps_distance:
            return sum(lap.total_distance for lap in self.laps)
        else:
            return None

    @cached_property
    def total_calories(self) -> Optional[float]:
        laps_total_calories = list(filter(None, (lap.total_calories for lap in self.laps)))
        if laps_total_calories:
            return sum(laps_total_calories)
        else:
            return None

    @cached_property
    def avg_cadence(self) -> Optional[float]:
        laps_avg_cadence = list(filter(None, (lap.avg_cadence for lap in self.laps)))
        if laps_avg_cadence:
            return np.average(
                np.asarray(laps_avg_cadence),
                weights=np.fromiter((lap.total_timer_time for lap in self.laps), float),
            )
        else:
            return None

    @cached_property
    def max_cadence(self) -> Optional[float]:
        laps_max_cadence = list(filter(None, (lap.max_cadence for lap in self.laps)))
        return max(laps_max_cadence, default=None)

    @cached_property
    def avg_speed(self) -> Optional[float]:
        laps_avg_speed = list(filter(None, (lap.avg_speed for lap in self.laps)))
        if laps_avg_speed:
            return np.average(
                np.asarray(laps_avg_speed),
                weights=np.fromiter((lap.total_timer_time for lap in self.laps), float),
            )
        else:
            return None

    @cached_property
    def max_speed(self) -> Optional[float]:
        laps_max_speed = list(filter(None, (lap.max_speed for lap in self.laps)))
        return max(laps_max_speed, default=None)

    @cached_property
    def avg_power(self) -> Optional[float]:
        laps_avg_power = list(filter(None, (lap.avg_power for lap in self.laps)))
        if laps_avg_power:
            return np.average(
                np.asarray(laps_avg_power),
                weights=np.fromiter((lap.total_timer_time for lap in self.laps), float),
            )
        else:
            return None

    @cached_property
    def max_power(self) -> Optional[float]:
        laps_max_power = list(filter(None, (lap.max_power for lap in self.laps)))
        return max(laps_max_power, default=None)

    @cached_property
    def avg_heart_rate(self) -> Optional[float]:
        laps_avg_heart_rate = list(filter(None, (lap.avg_heart_rate for lap in self.laps)))
        if laps_avg_heart_rate:
            return np.average(
                np.asarray(laps_avg_heart_rate),
                weights=np.fromiter((lap.total_timer_time for lap in self.laps), float),
            )
        else:
            return None

    @cached_property
    def max_heart_rate(self) -> Optional[float]:
        laps_max_heart_rate = list(filter(None, (lap.max_heart_rate for lap in self.laps)))
        return max(laps_max_heart_rate, default=None)


@dataclass(frozen=True)
class Activity():
    sessions: list[Session]
    sport: Sport

    @cached_property
    def start_time(self) -> TS:
        return max(session.start_time for session in self.sessions)

    @cached_property
    def stop_time(self) -> TS:
        return max(session.stop_time for session in self.sessions)

    @cached_property
    def total_timer_time(self) -> float:
        return sum(session.total_timer_time for session in self.sessions)


def parse_xml(inp):
    xml_bytes = inp.read().lstrip()
    parser = etree.XMLParser(remove_blank_text=True)
    xml = etree.parse(BytesIO(xml_bytes), parser)
    return xml


def parse_tcx(xml) -> Activity:
    activity = xml.find('{*}Activities/{*}Activity')
    laps = list(parse_tcx_lap(lap) for lap in activity.findall('{*}Lap'))

    match activity.get('Sport'):
        case "biking" | "Biking":
            sport = Sport.IndoorCycling
        case "running" | "Running":
            sport = Sport.Treadmill
        case s:
            raise Exception(f"Unknown sport: {s}")

    return Activity(
        sessions=[Session(laps)],
        sport=sport,
    )


def parse_tcx_lap(xml) -> Lap:
    tp0 = xml.find('{*}Track').find('{*}Trackpoint')
    ext0 = tp0.find('{*}Extensions')
    ext_tpx0 = ext0.find('{*}TPX')

    timestamp = []
    distance = [] if tp0.findtext('{*}DistanceMeters') is not None else None
    altitude = [] if tp0.findtext('{*}AltitudeMeters') is not None else None
    cadence = [] if tp0.findtext('{*}Cadence') is not None else None
    speed = [] if ext_tpx0.findtext('{*}Speed') is not None else None
    power = [] if ext_tpx0.findtext('{*}Watts') is not None else None
    heart_rate = [] if tp0.findtext('{*}HeartRateBpm/{*}Value') is not None else None

    for tp in xml.find('{*}Track').findall('{*}Trackpoint'):
        ext = tp.find('{*}Extensions')
        ext_tpx = ext.find('{*}TPX')
        timestamp.append(TS(isoparse(tp.findtext('{*}Time')).timestamp()))
        if distance is not None:
            distance.append(float(tp.findtext('{*}DistanceMeters')))
        if altitude is not None:
            altitude.append(float(tp.findtext('{*}AltitudeMeters')))
        if cadence is not None:
            cadence.append(float(tp.findtext('{*}Cadence')))
        if speed is not None:
            speed.append(float(ext_tpx.findtext('{*}Speed')))
        if power is not None:
            power.append(float(ext_tpx.findtext('{*}Watts')))
        if heart_rate is not None:
            heart_rate.append(float(tp.findtext('{*}HeartRateBpm/{*}Value')))

    total_calories = xml.findtext('{*}Calories')

    timestamp_interp = np.arange(min(timestamp), max(timestamp) + 1)
    timestamp = np.asarray(timestamp)
    def interp(lst): return np.interp(timestamp_interp, timestamp, np.asarray(lst))

    return Lap(
        timestamp=timestamp_interp,
        _distance=Q(interp(distance), ureg.m) if distance is not None else None,
        _altitude=Q(interp(altitude), ureg.m) if altitude is not None else None,
        _cadence=Q(interp(cadence), ureg.rpm) if cadence is not None else None,
        _speed=Q(interp(speed), ureg.kph) if speed is not None else None,
        _power=Q(interp(power), ureg.watt) if power is not None else None,
        _heart_rate=Q(interp(heart_rate), 1 / ureg.minute) if heart_rate is not None else None,
        total_calories=float(total_calories) if total_calories is not None else None,
    )


def fit_datetime(ts: TS) -> fit.DateTime:
    return fit.DateTime(0, ts - fit.DateTime.OFFSET / 1000)


class FitWriter(AbstractContextManager):
    _e: fit.FileEncoder

    def __init__(self, filename: str):
        self._e = fit.FileEncoder(java.io.File(filename), fit.Fit.ProtocolVersion.V2_0)

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._e.close()

    def _write(self, m: fit.Mesg):
        self._e.write(m)

    def file_id(self, start_time: TS):
        m = fit.FileIdMesg()
        m.setTimeCreated(fit_datetime(start_time))
        m.setManufacturer(fit.Manufacturer.ZWIFT)
        m.setProduct(JInt(0))
        m.setNumber(JInt(0))
        m.setType(fit.File.ACTIVITY)
        self._write(m)

    def device_info(self):
        m = fit.DeviceInfoMesg()
        m.setTimestamp(fit.DateTime(789516505))
        m.setSerialNumber(JLong(3825981698))
        m.setCumOperatingTime(JLong(0))
        m.setManufacturer(fit.Manufacturer.ZWIFT)
        m.setProduct(JInt(0))
        m.setSoftwareVersion(JFloat(5.62))
        m.setBatteryVoltage(JFloat(0))
        m.setDeviceIndex(JShort(0))
        m.setDeviceType(JShort(0))
        m.setHardwareVersion(JShort(0))
        m.setBatteryStatus(JShort(0))
        self._write(m)

    def event_start(self, start_time: TS):
        m = fit.EventMesg()
        m.setTimestamp(fit_datetime(start_time))
        m.setEvent(fit.Event.TIMER)
        m.setEventType(fit.EventType.START)
        m.setTimerTrigger(fit.TimerTrigger.MANUAL)
        self._write(m)

    def event_stop(self, stop_time: TS):
        m = fit.EventMesg()
        m.setTimestamp(fit_datetime(stop_time))
        m.setEvent(fit.Event.TIMER)
        m.setEventType(fit.EventType.STOP_ALL)
        m.setTimerTrigger(fit.TimerTrigger.MANUAL)
        self._write(m)

    def record(
        self,
        timestamp: TS,
        distance: Optional[float],
        altitude: Optional[float],
        cadence: Optional[float],
        speed: Optional[float],
        power: Optional[float],
        heart_rate: Optional[float],
    ):
        m = fit.RecordMesg()
        m.setTimestamp(fit_datetime(timestamp))
        if distance is not None:
            m.setDistance(JFloat(distance))
        if altitude is not None:
            m.setAltitude(JFloat(altitude))
        if cadence is not None:
            m.setCadence(JShort(cadence))
        if speed is not None:
            m.setSpeed(JFloat(speed))
        if power is not None:
            m.setPower(JInt(power))
        if heart_rate is not None:
            m.setHeartRate(JShort(heart_rate))
        self._write(m)

    def lap(
        self,
        index: int,
        start_time: TS,
        stop_time: TS,
        total_elapsed_time: float,
        total_timer_time: float,
        total_distance: Optional[float],
        total_calories: Optional[float],
        avg_speed: Optional[float],
        max_speed: Optional[float],
        avg_power: Optional[float],
        max_power: Optional[float],
        avg_heart_rate: Optional[float],
        max_heart_rate: Optional[float],
        avg_cadence: Optional[float],
        max_cadence: Optional[float],
        sport: Sport,
    ):
        m = fit.LapMesg()
        m.setMessageIndex(JInt(index))
        m.setTimestamp(fit_datetime(stop_time))
        m.setTotalElapsedTime(JFloat(total_elapsed_time))
        m.setTotalTimerTime(JFloat(total_timer_time))
        m.setStartTime(fit_datetime(start_time))
        if total_distance is not None:
            m.setTotalDistance(JFloat(total_distance))
        if total_calories is not None:
            m.setTotalCalories(JInt(total_calories))
        if avg_speed is not None:
            m.setAvgSpeed(JFloat(avg_speed))
        if max_speed is not None:
            m.setMaxSpeed(JFloat(max_speed))
        if avg_power is not None:
            m.setAvgPower(JInt(avg_power))
        if max_power is not None:
            m.setMaxPower(JInt(max_power))
        if avg_heart_rate is not None:
            m.setAvgHeartRate(JShort(avg_heart_rate))
        if max_heart_rate is not None:
            m.setMaxHeartRate(JShort(max_heart_rate))
        if avg_cadence is not None:
            m.setAvgCadence(JShort(avg_cadence))
        if max_cadence is not None:
            m.setMaxCadence(JShort(max_cadence))
        m.setSport(sport.value[0])
        m.setSubSport(sport.value[1])
        m.setEvent(fit.Event.LAP)
        m.setEventType(fit.EventType.STOP)
        self._write(m)

    def session(
        self,
        index: int,
        start_time: TS,
        stop_time: TS,
        total_elapsed_time: float,
        total_timer_time: float,
        total_distance: Optional[float],
        total_calories: Optional[float],
        avg_speed: Optional[float],
        max_speed: Optional[float],
        avg_power: Optional[float],
        max_power: Optional[float],
        avg_heart_rate: Optional[float],
        max_heart_rate: Optional[float],
        avg_cadence: Optional[float],
        max_cadence: Optional[float],
        first_lap_index: int,
        num_laps: int,
        sport: Sport,
    ):
        m = fit.SessionMesg()
        m.setMessageIndex(JInt(index))
        m.setTimestamp(fit_datetime(stop_time))
        m.setStartTime(fit_datetime(start_time))
        m.setTotalElapsedTime(JFloat(total_elapsed_time))
        m.setTotalTimerTime(JFloat(total_timer_time))
        if total_distance is not None:
            m.setTotalDistance(JFloat(total_distance))
        if total_calories is not None:
            m.setTotalCalories(JInt(total_calories))
        if avg_speed is not None:
            m.setAvgSpeed(JFloat(avg_speed))
        if max_speed is not None:
            m.setMaxSpeed(JFloat(max_speed))
        if avg_power is not None:
            m.setAvgPower(JInt(avg_power))
        if max_power is not None:
            m.setMaxPower(JInt(max_power))
        if avg_heart_rate is not None:
            m.setAvgHeartRate(JShort(avg_heart_rate))
        if max_heart_rate is not None:
            m.setMaxHeartRate(JShort(max_heart_rate))
        if avg_cadence is not None:
            m.setAvgCadence(JShort(avg_cadence))
        if max_cadence is not None:
            m.setMaxCadence(JShort(max_cadence))
        m.setFirstLapIndex(JInt(first_lap_index))
        m.setNumLaps(JInt(num_laps))
        m.setSport(sport.value[0])
        m.setSubSport(sport.value[1])
        m.setEvent(fit.Event.SESSION)
        m.setEventType(fit.EventType.STOP)
        self._write(m)

    def activity(self, stop_time: TS, total_timer_time: float, num_sessions: int):
        m = fit.ActivityMesg()
        m.setTimestamp(fit_datetime(stop_time))
        m.setLocalTimestamp(JLong(0))
        m.setTotalTimerTime(JFloat(total_timer_time))
        m.setNumSessions(JInt(num_sessions))
        m.setType(fit.Activity.MANUAL)
        m.setEvent(fit.Event.ACTIVITY)
        m.setEventType(fit.EventType.STOP)
        self._write(m)


def activity_to_fit(f: FitWriter, activity: Activity):
    # header
    f.file_id(start_time=activity.start_time)
    f.device_info()

    # records
    f.event_start(start_time=activity.start_time)
    for session in activity.sessions:
        for lap in session.laps:
            for i, ts in np.ndenumerate(lap.timestamp):
                f.record(
                    timestamp=ts,
                    distance=lap.distance[i] if lap.distance is not None else None,
                    altitude=lap.altitude[i] if lap.altitude is not None else None,
                    cadence=lap.cadence[i] if lap.cadence is not None else None,
                    speed=lap.speed[i] if lap.speed is not None else None,
                    power=lap.power[i] if lap.power is not None else None,
                    heart_rate=lap.heart_rate[i] if lap.heart_rate is not None else None,
                )
    f.event_stop(stop_time=activity.stop_time)

    # laps, sessions
    session_index = 0
    lap_index = 0
    for session in activity.sessions:
        first_lap_index = lap_index

        for lap in session.laps:
            f.lap(
                index=lap_index,
                start_time=lap.start_time,
                stop_time=lap.stop_time,
                total_elapsed_time=lap.total_elapsed_time,
                total_timer_time=lap.total_timer_time,
                total_distance=lap.total_distance,
                total_calories=lap.total_calories,
                avg_speed=lap.avg_speed,
                max_speed=lap.max_speed,
                avg_power=lap.avg_power,
                max_power=lap.max_power,
                avg_heart_rate=lap.avg_heart_rate,
                max_heart_rate=lap.max_heart_rate,
                avg_cadence=lap.avg_cadence,
                max_cadence=lap.max_cadence,
                sport=activity.sport,
            )
            lap_index += 1

        f.session(
            index=session_index,
            start_time=session.start_time,
            stop_time=session.stop_time,
            total_elapsed_time=session.total_elapsed_time,
            total_timer_time=session.total_timer_time,
            total_distance=session.total_distance,
            total_calories=session.total_calories,
            avg_speed=session.avg_speed,
            max_speed=session.max_speed,
            avg_power=session.avg_power,
            max_power=session.max_power,
            avg_heart_rate=session.avg_heart_rate,
            max_heart_rate=session.max_heart_rate,
            avg_cadence=session.avg_cadence,
            max_cadence=session.max_cadence,
            first_lap_index=first_lap_index,
            num_laps=lap_index - first_lap_index,
            sport=activity.sport,
        )
        session_index += 1

    # activity
    f.activity(
        stop_time=activity.stop_time,
        total_timer_time=activity.total_timer_time,
        num_sessions=session_index,
    )


@click.command()
@click.argument('inp', type=click.File('rb'))
@click.argument('out', type=click.Path())
def main(inp, out):
    with FitWriter(out) as f:
        activity_to_fit(f, parse_tcx(parse_xml(inp)))


if __name__ == "__main__":
    main()
