#!/usr/bin/env bash

# Run command with a fake $HOME and optionally tmpfs in /tmp,
# mounting everything but $PWD read-only.
#
# Useful for running those "modern" language-specific package managers
# in a controlled environment.

set -eu -o pipefail

# shellcheck source-path=..
. "$HOME"/bin/.o

options=$(
	unset GETOPT_COMPATIBLE
	getopt \
		-o hH:Tt \
		--long "help,home:,home-tmpfs,tmpfs" \
		-- "$@"
)
eval "set -- $options"

home=$PWD/.home
home_tmpfs=
tmpfs=
while (( $# )); do
	opt=$1; shift
	case "$opt" in
		-h|--help)
			echo "Usage: bwrap-home [-h|--home=PATH] [-T|--home-tmpfs] [-t|--tmpfs] -- <command> [<args>â€¦]"
			exit
			;;

		-H|--home) home=$1; shift ;;
		-T|--home-tmpfs) home_tmpfs=: ;;
		-t|--tmpfs) tmpfs=: ;;
		--) break ;;
	esac
done

if [[ "$(readlink -f "$PWD")" == "$(readlink -f "$HOME")" ]]; then
	echo "\$PWD == \$HOME, would mount \$HOME read-write, exiting"
	exit 1
fi

bwrap_opts=()

if [[ $tmpfs ]]; then
	if [[ "$(readlink -f "$PWD")" == "$(readlink -f /tmp)" ]]; then
		echo "\$PWD == /tmp, would mount /tmp read-write, exiting"
		exit 1
	fi

	bwrap_opts+=(--tmpfs /tmp)
else
	bwrap_opts+=(--bind /tmp{,})
fi

if [[ $home_tmpfs ]]; then
	bwrap_opts+=(
		--tmpfs "$HOME"
		--bind "$PWD"{,}
	)
else
	home=$(readlink -f "$home")
	[[ -d "$home" ]] || o mkdir -p "$home"
	export HOME="$home"
	bwrap_opts+=(
		--bind "$PWD"{,}
		--bind "$HOME"{,}
	)
fi

(( $# )) || set -- bash

o exec bwrap \
	--ro-bind /{,} \
	--dev /dev \
	--proc /proc \
	"${bwrap_opts[@]}" \
	-- "$@"
