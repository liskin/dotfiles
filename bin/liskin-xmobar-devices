#!/usr/bin/env bash

# Indicator of powered-on devices for xmobar. This notifies me that devices
# like nvidia, touchscreen or USB camera are active so that I can disable them
# as soon as I don't need them any more.

set -eu -o pipefail
shopt -s lastpipe nullglob extglob

poll_frequency=30
debounce_read_timeout=0.5
debounce_loop_timeout=5

function xmobar-proplog {
	xprop -root -f "${1:?prop}" 8u -set "$1" "${2?text}"
}

function log {
	if [[ -v last_log && "$last_log" == "$1" ]]; then return; fi
	xmobar-proplog _XMOBAR_DEVICES "$1"
	last_log="$1"
}

function log-pp {
	if [[ -v last_log_pp && "$last_log_pp" == "$1" ]]; then return; fi
	xmobar-proplog _XMOBAR_DEVICES_PP "$1"
	last_log_pp="$1"
}

function find-nvidia {
	local vendor f
	if [[ -v sys_nvidia_dev ]]; then return; fi

	sys_nvidia_dev=""
	for f in /sys/bus/pci/devices/*/vendor; do
		read -r vendor <"$f"
		if [[ "$vendor" == 0x10de ]]; then
			sys_nvidia_dev=$(dirname "$f")
			return
		fi
	done
}

function check-nvidia {
	local power
	set -- /sys/module/nvidia*
	find-nvidia
	if [[ "$sys_nvidia_dev" ]]; then
		read -r power <"$sys_nvidia_dev"/power/runtime_status
		(( $# )) || [[ "$power" == active ]]
	else
		return 1
	fi
}

function check-gvt {
	set -- /sys/class/mdev_bus/*/mdev_supported_types/*/devices/*
	(( $# ))
}

function check-touchscreen {
	local name f
	for f in /sys/class/input/input*/name; do
		read -r name <"$f"
		[[ "$name" == "Raydium Corporation Raydium Touch System" ]] && return 0
	done
	return 1
}

function check-camera {
	local name interface f
	for f in /sys/class/video4linux/video*; do
		[[ -e "${f}/name" ]] && read -r name <"${f}/name" && [[ "$name" == *"Integrated "?(RGB )"Camera"* ]] && return 0
		[[ -e "${f}/device/interface" ]] && read -r interface <"${f}/device/interface" && [[ "$interface" == *"Integrated "?(RGB )"Camera"* ]] && return 0
	done
	return 1
}

function check-vpns {
	local name type
	vpns=()

	# shellcheck disable=SC2162
	nmcli --get-values NAME,TYPE c show --active \
	| while IFS=: read name type; do
		if [[ $type == @(vpn|tun|tap|wireguard) ]]; then
			name=${name##@(tun|tap|wg|vpn)?(_)}
			vpns+=("$name")
		fi
	done

	# shellcheck disable=SC2162
	systemctl --user --plain --quiet list-units 'liskin-vpnns-tun@*.service' \
	| while read name _; do
		name=${name#liskin-vpnns-tun@}
		name=${name%.service}
		vpns+=(vpnns:"$name")
	done

	(( ${#vpns[@]} ))
}

function check-sys-docker {
	systemctl is-active --quiet docker.service
}

function check-user-docker {
	systemctl --user is-active --quiet docker.service
}

function is-pid-valid {
	local -; set +e  # $(< â€¦) exits the whole script otherwise
	local pp
	{ pp=$(< "${1:?}"); } 2>/dev/null && [[ -d /proc/"$pp" ]]
}

function check-sys-libvirt {
	libvirt_sys_domains=()

	local name
	is-pid-valid /run/libvirtd.pid || return

	local f
	for f in /run/libvirt/qemu/*.xml; do
		if is-pid-valid "${f%.xml}.pid"; then
			name="${f##*/}"
			name="${name%.xml}"
			libvirt_sys_domains+=("$name")
		fi
	done
}

function check-user-libvirt {
	libvirt_user_domains=()

	local name
	is-pid-valid "$XDG_RUNTIME_DIR"/libvirt/libvirtd.pid || return

	local f
	for f in "$XDG_RUNTIME_DIR"/libvirt/qemu/run/*.xml; do
		if is-pid-valid "${f%.xml}.pid"; then
			name="${f##*/}"
			name="${name%.xml}"
			libvirt_user_domains+=("$name")
		fi
	done
}

function check-bt-battery {
	local bt_addr
	bt_battery=

	[[ $(pactl info) =~ "Default Sink: bluez_output."([0-9A-F_]*)"."* ]] || return 1
	bt_addr="${BASH_REMATCH[1]}"
	busctl get-property org.bluez /org/bluez/hci0/dev_"$bt_addr" org.bluez.Battery1 Percentage \
		| read -r _ bt_battery
	[[ ${bt_battery-} ]]
}

function refresh {
	log=""

	check-nvidia && log="$log <fn=3>"$'\ue266'" </fn>"
	check-gvt && log="$log v<fn=3>"$'\ue266'" </fn>"
	check-touchscreen && log="$log <fn=5>"$'\uf25a'"</fn>"
	check-camera && log="$log <fn=3>"$'\uf03d'" </fn>"
	check-vpns && log="$log <fn=3>"$'\uf983'" (${vpns[*]})</fn>"
	check-sys-docker && log="$log <fn=3>"$'\uf308'" </fn>"
	check-user-docker && log="$log <fn=3>"$'\ue7b0'" </fn>"
	check-sys-libvirt && log="$log <fn=3>"$'\uea7a'" (${libvirt_sys_domains[*]})</fn>"
	check-user-libvirt && log="$log <fn=3>"$'\ueb7b'" (${libvirt_user_domains[*]})</fn>"
	log="${log:+<fc=red>$log</fc>}"

	check-bt-battery && log="$log <fn=3>"$'\uf7ca'" </fn>${bt_battery}%"

	log "$log"
}

function refresh-pp {
	local power_profile=

	busctl get-property org.freedesktop.UPower.PowerProfiles /org/freedesktop/UPower/PowerProfiles org.freedesktop.UPower.PowerProfiles ActiveProfile | read -r _ power_profile || :
	case "$power_profile" in
		\"performance\") power_profile=H ;;
		\"balanced\") power_profile=M ;;
		\"power-saver\") power_profile=L ;;
		*) power_profile="?" ;;
	esac

	log-pp "$power_profile"
}

function monitor {
	{
		echo force initial refresh

		trap 'pkill -P $BASHPID' EXIT
		udevadm monitor -k &
		liskin-xmobar-devices-dbus.py --systemd-unit-regex 'docker|vpnns_2dtun' &
		wait -n
	} | while :; do
		if read -r -t $poll_frequency _; then
			debounce_start=$SECONDS
			while read -r -t $debounce_read_timeout _ && (( debounce_start + debounce_loop_timeout > SECONDS )); do :; done
		elif (( $? <= 128 )); then
			break  # not a timeout, exit
		fi

		refresh
		refresh-pp
	done
}

(( $# )) || set -- monitor
"$@"
